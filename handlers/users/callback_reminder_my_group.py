from aiogram.types import CallbackQuery
from loader import dp, db

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

# Create the inline keyboard
def create_group_keyboard(is_reminder_on: bool):
    # Define buttons based on reminder status
    add_birthday_button = InlineKeyboardButton(
        text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è" if not is_reminder_on else "üö´ –£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è",
        callback_data="add_birthday" if not is_reminder_on else "remove_birthday"
    )
    participants_button = InlineKeyboardButton(text="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data="view_participants")
    back_button = InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="go_back")

    # Create the keyboard layout
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(add_birthday_button, participants_button, back_button)

    return keyboard

@dp.callback_query_handler(text_contains="reminder_my_group_id:")
async def callback_reminder_my_group(callback_query: CallbackQuery):
    await callback_query.answer()
    
    # Extract the group ID from the callback data
    rg_id = callback_query.data.split(':')[1]
    
    # Fetch reminder group data from the database
    my_reminder_group = await db.get_reminder_my_group(int(rg_id), callback_query.from_user.id)
    
    # If no group data found, return early to avoid errors
    if not my_reminder_group:
        await callback_query.message.edit_text("–û—à–∏–±–∫–∞: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã.", parse_mode="markdown")
        return
    
    # Get the group information
    group = await dp.bot.get_chat(my_reminder_group[0]['group_id'])
    
    # Determine notification status message
    reminder_status = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if my_reminder_group[0]['is_reminder_on'] else "üö´ –û—Ç–∫–ª—é—á–µ–Ω–æ"
    action_text = (
        "–ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚Äúüö´ –£–¥–∞–ª–∏—Ç—å‚Äù"
        if my_reminder_group[0]['is_reminder_on']
        else "–ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —ç—Ç—É –≥—Ä—É–ø–ø—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚Äú‚úÖ –î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è‚Äù"
    )

    # Prepare the response message
    text = f"""
–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: ‚Äú*{group.title}*‚Äù

*–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {reminder_status}*
{action_text}

–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚Äú–£—á–∞—Å—Ç–Ω–∏–∫–∏‚Äù
    """
    
    # Edit the message with the new text
    await callback_query.message.edit_text(text, parse_mode="markdown", reply_markup=create_group_keyboard(my_reminder_group[0]['is_reminder_on']))
